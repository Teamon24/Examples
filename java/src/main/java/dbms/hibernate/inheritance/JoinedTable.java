package dbms.hibernate.inheritance;

import dbms.hibernate.AutoGeneratedId;
import lombok.Setter;
import lombok.experimental.Accessors;

import javax.persistence.Entity;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;

/**
 * <p>Using this strategy, each class in the hierarchy is
 * mapped to its table. The only column that repeatedly
 * appears in all the tables is the identifier, which will be
 * used for joining them when needed.
 *
 * <p>The disadvantage of this inheritance mapping method is that retrieving entities requires joins
 * between tables, which can result in lower performance for large numbers of records.
 *
 * <p>The number of joins is higher when querying the parent class because it will join with every
 * single related child â€” so performance is more likely to be affected the higher up the hierarchy
 * we want to retrieve records.
 */
public class JoinedTable {
}

@Accessors(chain = true)
@Entity
@Table(name = "animals")
@Inheritance(strategy = InheritanceType.JOINED)
class Animal extends AutoGeneratedId<Long> {
    @Setter
    private String species;
}

@Accessors(chain = true)
@Entity
@Table(name = "pets")
@PrimaryKeyJoinColumn(name = "pet_id")
class Pet extends Animal {
    @Setter
    private String name;
}
