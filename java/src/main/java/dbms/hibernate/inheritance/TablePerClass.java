package dbms.hibernate.inheritance;

import dbms.hibernate.AutoGeneratedId;
import lombok.Setter;
import lombok.experimental.Accessors;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.Table;

/**
 * <p>The Table per Class strategy maps each entity to its
 * table, which contains all the properties of the entity,
 * including the ones inherited.
 *
 * <p>The resulting schema is similar to the one using
 * @MappedSuperclass. But Table per Class will indeed define
 * entities for parent classes, allowing associations and
 * polymorphic queries as a result.
 */
public class TablePerClass {
}

/**
 * <p>Then we can create the subclasses in the standard way.
 * <p>This is not that different from merely mapping each entity without inheritance. The distinction is clear when querying the base class, which will return all the subclass records as well by using a UNION statement in the background.
 * <p>The use of UNION can also lead to inferior performance when choosing this strategy. Another issue is that we can no longer use identity key generation.
 */
@Accessors(chain = true)
@Entity
@Table(name = "vehicles")
@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)
class Vehicle extends AutoGeneratedId<Long> {
    @Setter
    private String manufacturer;
}

@Accessors(chain = true)
@Entity(name = "trucks")
class Truck extends Vehicle {
    @Setter
    @Column(name = "seats_quantity")
    private int seatsQuantity;
}

@Accessors(chain = true)
@Entity(name = "cars")
class Car extends Vehicle {
    @Setter
    @Column(name = "capacity")
    private int capacity;
}

@Accessors(chain = true)
@Entity(name = "bicycles")
class Bicycle extends Vehicle {
    @Setter
    @Column(name = "speeds_quantity")
    private int speedsQuantity;
}
