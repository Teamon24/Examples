package dbms.hibernate.relashonship.one_to_one;


import dbms.hibernate.AutoGeneratedId;
import dbms.hibernate.HibernateUtils;
import dbms.hibernate.SessionFactoryBuilder;
import org.hibernate.Session;
import org.hibernate.SessionFactory;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.OneToOne;
import javax.persistence.Table;

import static dbms.hibernate.TransactionUtils.commit;

/**
 * <ul>It's one-to-one, but sometimes an employee might not have a workstation and vice versa.</ul>
 *
 * <pre>
 *  ___________     ______________________     ______________
 * | employees |   | employee_workstation |   | workstations |
 * |___________|   |______________________|   |______________|
 * |           |   | workstation_id-------|-->| id           |
 * | id        |<--|-employee_id          |   | number       |
 * | name      |   |                      |   | floor        |
 *
 * </pre>
 */
public interface Optional {
    String JOIN = "select es.id employee_id, ws.id station_id from employees es " +
        "    left join employee_workstation ew on es.id = ew.employee_id " +
        "    full join work_stations ws on ws.id = ew.workstation_id";

    static void main(String[] args) {
        SessionFactory sessionFactory = new SessionFactoryBuilder()
            .resourceName("/META-INF/hibernate-postgresql-example.cfg.xml")
            .entitiesClasses(
                Employee.class,
                WorkStation.class)
            .build();

        Session session = sessionFactory.openSession();
        commit(session, s -> {
            WorkStation workStation1 = new WorkStation();
            WorkStation workStation2 = new WorkStation();
            s.save(new Employee().addStation(workStation1));
            s.save(new Employee().addStation(workStation2));
            s.save(new Employee().addStation(workStation2));
            s.save(new Employee().addStation(workStation1));
        });

        commit(session, s -> {
            s.save(new Employee());
            s.save(new WorkStation());
            s.save(new WorkStation());
        });

        HibernateUtils.printNativeSelectWithColumns(session, JOIN);
    }
}

@Entity
@Table(name = "employees")
class Employee extends AutoGeneratedId<Long> {

    @OneToOne(cascade = CascadeType.ALL)
    @JoinTable(name = "employee_workstation",
        joinColumns = {@JoinColumn(name = "employee_id", referencedColumnName = "id")},
        inverseJoinColumns = {@JoinColumn(name = "workstation_id", referencedColumnName = "id")})
    private WorkStation workStation;

    public Employee addStation(WorkStation workStation) {
        this.workStation = workStation;
        return this;
    }
}

@Entity
@Table(name = "work_stations")
class WorkStation extends AutoGeneratedId<Long> {

    @OneToOne(mappedBy = "workStation")
    private Employee employee;
}
