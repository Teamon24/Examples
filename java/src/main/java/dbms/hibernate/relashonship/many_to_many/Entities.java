package dbms.hibernate.relashonship.many_to_many;

import dbms.hibernate.AutoGeneratedId;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import utils.NullUtils;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Embeddable;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.MapsId;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.StringJoiner;


/**
 * <pre>
 *                      JOIN TABLE
 *                      |-----------------------|
 *                     	| course_like         	|
 *                      |---------------------	|
 *                 |----|--student_id:FK      	|
 *                 |    |  course_id:FK---------|-----------|
 *                 |    |-----------------------|           |
 *                 |                                        |
 *                 |                                        |
 *                 |    COMPOSITE KEY                       |
 *                 |    |-----------------------|           |
 *                 |   	| course_rating       	|           |
 * |---------|     |    |-----------------------|           |    |-----------|
 * | student |     |----|--student_id:FK       	|           |    | course    |
 * |---------|     |    |  course_id:FK---------|-----------|    |-----------|
 * | id:PK   |<----| 	|  rating              	|           |--->| id:PK     |
 * |---------|     |    |-----------------------|           |    |-----------|
 *                 |                                        |
 *                 |                                        |
 *                 |                                        |
 *                 |    NEW ENTITY                          |
 *                 |    |-----------------------|           |
 *                 |    | course_registration 	|           |
 *                 |    |-----------------------|           |
 *                 |    |  id:PK               	|           |
 *                 |    |----                   |           |
 *                 |----|--student_id:FK       	|           |
 *                     	|  course_id:FK---------|-----------|
 *                     	|  registered_at       	|
 *                     	|  grade               	|
 *                     	|-----------------------|
 * </pre>
 */
public interface Entities {}

@Getter
@Entity
@Table(name = "students")
class Student extends AutoGeneratedId<Integer> {

    public Student(Integer id) {
        super.id = id;
    }

    public Student(String fullName) {
        this.fullName = fullName;
    }

    @Column(name = "full_name")
    private String fullName;

    @ManyToMany
    @JoinTable(
        name = "course_likes",
        joinColumns = @JoinColumn(name = "student_id"),
        inverseJoinColumns = @JoinColumn(name = "course_id"),
        uniqueConstraints = @UniqueConstraint(columnNames = { "student_id", "course_id" }))
    private Set<Course> likedCourses = new HashSet<>();

    @OneToMany(mappedBy = "student", cascade = CascadeType.REMOVE)
    private Set<CourseRating> courseRatings = new HashSet<>();

    @OneToMany(mappedBy = "student", cascade = CascadeType.REMOVE)
    private Set<CourseRegistration> coursesRegistrations = new HashSet<>();

    public Student addLikedCourses(Course... likes) {
        Arrays.stream(likes).forEach(this::addLikedCourse);
        return this;
    }

    public Student addLikedCourses(List<Course> likes) {
        likes.forEach(this::addLikedCourse);
        return this;
    }

    private void addLikedCourse(Course it) {
        this.getLikedCourses().add(it);
        it.getStudentsLikes().add(this);
    }
}

@Getter
@Entity
@Table(name = "courses")
class Course extends AutoGeneratedId<Integer> {

    public Course(Integer id) {
        super.id = id;
    }

    public Course(String title) {
        this.title = title;
    }

    @Column(name = "title")
    private String title;

    @ManyToMany(mappedBy = "likedCourses")
    private Set<Student> studentsLikes = new HashSet<>();

    @OneToMany(mappedBy = "course", cascade = CascadeType.REMOVE)
    private Set<CourseRating> courseRatings = new HashSet<>();

    @OneToMany(mappedBy = "course", cascade = CascadeType.REMOVE)
    private Set<CourseRegistration> coursesRegistrations = new HashSet<>();
}

@Getter
@Embeddable
@NoArgsConstructor
class CourseRatingKey implements Serializable {

    public CourseRatingKey(Integer studentId, Integer courseId) {
        this.studentId = studentId;
        this.courseId = courseId;
    }

    public CourseRatingKey(Student student, Course course) {
        this.studentId = student.getId();
        this.courseId = course.getId();
    }

    @Column(name = "student_id")
    private Integer studentId;

    @Column(name = "course_id")
    private Integer courseId;

    @Override
    public String toString() {
        return new StringJoiner(", ", CourseRatingKey.class.getSimpleName() + "[", "]")
            .add("studentId=" + studentId)
            .add("courseId=" + courseId)
            .toString();
    }
}

@Getter
@Entity
@Table(name = "course_ratings")
class CourseRating extends AutoGeneratedId<CourseRatingKey> {

    @EmbeddedId
    private CourseRatingKey id;

    @ManyToOne(cascade = CascadeType.MERGE)
    @MapsId("studentId")
    @JoinColumn(name = "student_id")
    private Student student;

    @ManyToOne
    @MapsId("courseId")
    @JoinColumn(name = "course_id")
    private Course course;

    private int rating;

    public CourseRating(Student student, Course course, int rating) {
        this.student = student;
        this.course = course;
        this.rating = rating;
        this.id = new CourseRatingKey(this.student, this.course);
    }

    public CourseRating(Integer studentId, Integer courseId, int rating) {
        this.rating = rating;
        this.student = new Student(studentId);
        this.course = new Course(courseId);
        this.id = new CourseRatingKey(studentId, courseId);
    }

    @Override
    public String toString() {
        return new StringJoiner(", ", CourseRating.class.getSimpleName() + "[", "]")
            .add("student:" +
                "id=" + NullUtils.get(student, Student::getId) +
                ", fullName=" + NullUtils.get(student, Student::getFullName))
            .add("course:" +
                "id=" + NullUtils.get(course, Course::getId) +
                ", title=" + NullUtils.get(course, Course::getTitle))
            .toString();
    }
}

@Getter
@Setter
@Entity
@Table(name = "course_registrations")
class CourseRegistration extends AutoGeneratedId<Integer> {

    @ManyToOne
    @JoinColumn(name = "student_id")
    private Student student;

    @ManyToOne
    @JoinColumn(name = "course_id")
    private Course course;

    @Column(name = "registered_at")
    private LocalDateTime registeredAt;

    private int grade;

    public CourseRegistration(Student student, Course course, int grade) {
        this.student = student;
        this.course = course;
        this.grade = grade;
        this.registeredAt = LocalDateTime.now();
    }
}
