package dbms.hibernate.relashonship.many_to_many;

import com.github.javafaker.Faker;
import dbms.hibernate.AutoGeneratedId;
import dbms.hibernate.HibernateUtils;
import dbms.hibernate.SessionFactoryBuilder;
import org.apache.commons.lang3.tuple.Pair;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import utils.ClassUtils;
import utils.CollectionUtils;
import utils.ListGenerator;

import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.stream.Collectors;

import static dbms.hibernate.HibernateUtils.find;
import static dbms.hibernate.HibernateUtils.printTable;
import static dbms.hibernate.TransactionUtils.commit;
import static dbms.hibernate.TransactionUtils.operate;
import static utils.PrintUtils.printfln;
import static java.lang.System.out;

public class Demo {

    public static final Faker FAKER = Faker.instance();

    private static final String LEFT_JOIN_STUDENTS_COURSES =
        "with ratings(course_id, avg_rating, arr) AS ( " +
            "    select cr.course_id, " +
            "           round(CAST(avg(cr.rating) as numeric), 2), " +
            "           concat('ratings:', array_agg(concat('#', cr.student_id, ':', cr.rating)), '') " +
            "    from course_ratings cr " +
            "    group by cr.course_id " +
            "), " +
            "     likes(course_id, likes) AS ( " +
            "         select cl.course_id, concat('likes:', array_agg(concat('#', cl.student_id)), '') " +
            "         from course_likes cl " +
            "         group by cl.course_id " +
            "     ), " +
            " " +
            "     registrations(course_id, students, dates) AS ( " +
            "         select cr.course_id, " +
            "                concat('regs:', array_agg(concat('#', cr.student_id, ':', cr.id)), ''), " +
            "                concat('dates:', array_agg(concat('#', cr.student_id, ':', " +
            "                       '[', to_char(cr.registered_at, 'DD-MM-YYYY HH:mm'),']')), '') " +
            "         from course_registrations cr " +
            "         group by cr.course_id " +
            "     ) " +
            "select c.id, c.title, r.avg_rating, r.arr, ls.likes, regs.students, regs.dates " +
            "from courses c " +
            "         left join ratings r on r.course_id = c.id " +
            "         left join likes ls on ls.course_id = c.id " +
            "         left join registrations regs on regs.course_id = c.id;";

    public static void main(String[] args) {

        SessionFactory sessionFactory = new SessionFactoryBuilder()
            .resourceName("/META-INF/hibernate-postgresql-example.cfg.xml")
            .entitiesClasses(
                Student.class,
                Course.class,
                CourseRating.class,
                CourseRegistration.class)
            .build();

        Session session = sessionFactory.openSession();

        int coursesAmount = 5;
        int studentsAmount = 30;

        List<Student> students = getStudents(studentsAmount);
        List<Course> courses = getCourses(coursesAmount);

        int removableCourseIndex = 0;
        int removableStudentIndex = 0;

        List<CourseRating> ratings = getRatings(
            students, courses,
            getRatingsIndexes(removableCourseIndex, removableStudentIndex)
        );

        int studentIndex = 6;

        CourseRating removableRating = new CourseRating(students.get(studentIndex), courses.get(1), 1);
        CourseRating rating = new CourseRating(students.get(studentIndex), courses.get(4), 1);

        List<CourseRegistration> registrations = getRegistrations(students, courses,
            getRegistrationsIndexes(removableCourseIndex, removableStudentIndex)
        );

        CourseRegistration removableRegistration = new CourseRegistration(students.get(1), courses.get(1), 1);
        registrations.add(removableRegistration);

        List<Student> likes = getCourseLikes(students, courses,
            getLikesIndexes(removableCourseIndex, removableStudentIndex));

        commit(session, s -> {
            operate(s, Session::save, courses);
            operate(s, Session::save, students);
            operate(s, Session::save, likes);

            CourseRating ratingByIds = new CourseRating(students.get(9).getId(), courses.get(4).getId(), 1);
            ratings.addAll(List.of(removableRating, rating, ratingByIds));

            operate(s, Session::save, ratings);
            operate(s, Session::save, registrations);
        });

        students.stream().map(
            student ->
                Pair.of(
                    student.getId(),
                    student.getLikedCourses().stream()
                        .filter(course -> course.getTitle() == null)
                        .collect(Collectors.toList()))
            )
            .collect(Collectors.toList());

        ratings.stream()
            .filter(rat -> rat.getCourse().getTitle() == null)
            .collect(Collectors.toList());

        registrations.stream().filter(reg -> reg.getCourse().getTitle() == null).collect(Collectors.toList());

        commit(Session::refresh, session, students);
        commit(Session::refresh, session, courses);
        commit(Session::refresh, session, registrations);


        Pair<String, String[][]> initialState = getJoinResult(session);

        Course removableCourse = courses.get(removableCourseIndex);
        Student removableStudent = students.get(removableStudentIndex);

        commit(session, s -> { CourseRepository.remove(s, removableCourse); });
        Pair<String, String[][]> courseDeletionResult = getJoinResult(session);

        commit(session, s -> { find(s, CourseRating.class, removableRating.getId()).ifPresent(s::remove); });
        Pair<String, String[][]> ratingDeletionResult = getJoinResult(session);

        commit(session, s -> { find(s, CourseRegistration.class, removableRegistration.getId()).ifPresent(s::remove); });
        Pair<String, String[][]> registrationDeletionResult = getJoinResult(session);

        commit(session, s -> { find(s, Student.class, removableStudent.getId()).ifPresent(s::remove); });
        Pair<String, String[][]> studentDeletionResult = getJoinResult(session);

        printlnJoin(initialState);
        printlnRemoveAndJoin(removableCourse, courseDeletionResult);
        printlnRemoveAndJoin(removableRating, ratingDeletionResult);
        printlnRemoveAndJoin(removableRegistration, registrationDeletionResult);
        printlnRemoveAndJoin(removableStudent, studentDeletionResult);
    }

    private static HashMap<Integer, List<Integer>> getLikesIndexes(
        Integer removableCourseIndex,
        int removableStudentIndex
    ) {
        return new HashMap<>() {{
            put(removableStudentIndex, List.of(removableCourseIndex, 1, 2, 3, 4));
            put(1, List.of(removableCourseIndex, 1, 2));
            put(2, List.of(1, 3));
            put(3, List.of(removableCourseIndex, 2, 4));
        }};
    }

    private static HashMap<Integer, List<Integer>> getRegistrationsIndexes(int removableCourseIndex, int removableStudentIndex) {
        return new HashMap<>() {{
            put(removableStudentIndex, List.of(removableCourseIndex, 1, 2, 3, 4));
            put(2, List.of(1, 2));
            put(3, List.of(1, 2));
            put(4, List.of(3, 4));
            put(5, List.of(1, 2, 3, 4));
            put(10, List.of(4));
        }};
    }

    private static HashMap<Integer, List<Integer>> getRatingsIndexes(int removableCourseIndex, int removableStudentIndex) {
        return new HashMap<>() {{
            put(removableStudentIndex, List.of(removableCourseIndex, 2, 3, 4));
            put(1, List.of(1));
            put(2, List.of(2));
            put(3, List.of(3));
            put(4, List.of(4));
            put(5, List.of(removableCourseIndex));
            put(7, List.of(2));
            put(8, List.of(3));
        }};
    }

    private static List<CourseRating> getRatings(
        List<Student> students,
        List<Course> courses,
        Map<Integer, List<Integer>> ratingsIndexes
    ) {

        return ratingsIndexes.entrySet().stream()
            .map(entry ->
                entry.getValue().stream().map(courseIndex ->
                new CourseRating(
                    students.get(entry.getKey()), courses.get(courseIndex), (entry.getKey() * 5))
                ).collect(Collectors.toList())
            ).flatMap(Collection::stream)
            .collect(Collectors.toList());
    }

    private static List<Student> getCourseLikes(
        List<Student> students,
        List<Course> courses,
        Map<Integer, List<Integer>> likes
    ) {
        return likes.entrySet()
            .stream()
            .map(entry -> {
                Integer studentId = entry.getKey();
                List<Integer> likedCoursesId = entry.getValue();
                return students
                    .get(studentId)
                    .addLikedCourses(CollectionUtils.getByIndexes(courses, likedCoursesId));
            })
            .collect(Collectors.toList());
    }

    private static List<CourseRegistration> getRegistrations(
        List<Student> students,
        List<Course> courses,
        Map<Integer, List<Integer>> registrations
    ) {
        return registrations.entrySet().stream()
            .map(entry ->
                {
                    List<Integer> coursesIds = entry.getValue();
                    return coursesIds.stream().map(
                        courseIndex -> new CourseRegistration(students.get(entry.getKey()), courses.get(courseIndex), 1)
                    ).collect(Collectors.toList());
                }
                ).flatMap(Collection::stream)
            .collect(Collectors.toList());
    }

    private static List<Course> getCourses(int coursesAmount) {
        return ListGenerator.create(coursesAmount, () -> new Course(FAKER.educator().course()));
    }

    private static List<Student> getStudents(int studentsAmount) {
        return ListGenerator.create(studentsAmount, () -> new Student(FAKER.name().fullName()));
    }

    private static void printEntity(
        Session session,
        AutoGeneratedId<?> entity,
        BiConsumer<Session, AutoGeneratedId<?>> action,
        String actionName
    ) {
        out.println(entity);
        action.accept(session, entity);
        printfln("After \"%s\": %s", actionName, entity);
    }

    private static void printlnRemoveAndJoin(AutoGeneratedId<?> autoGeneratedId, Pair<String, String[][]> joinResult) {
        out.println(getRemoveEntityMessage(autoGeneratedId));
        printTable(joinResult.getLeft(), joinResult.getRight());
    }

    private static void printlnJoin(Pair<String, String[][]> joinResult) {
        printTable(joinResult.getLeft(), joinResult.getRight());
    }

    private static Pair<String, String[][]> getJoinResult(Session session) {
        return HibernateUtils.getNativeSelectResult(session, LEFT_JOIN_STUDENTS_COURSES);
    }

    public static String getRemoveEntityMessage(AutoGeneratedId<?> entity) {
        return String.format("%s (id = '%s') was removed", ClassUtils.simpleName(entity), entity.getId());
    }
}
