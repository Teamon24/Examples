package dbms.hibernate.cascade;

import dbms.hibernate.AutoGeneratedId;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.MappedSuperclass;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

public class EntitiesManyToMany {
}

@Table(name = "authors")
@Entity
@NoArgsConstructor
class Author extends AuthorEssential<Book> {

    @Getter
    @Setter
    @javax.persistence.ManyToMany(mappedBy = "authors", cascade = { CascadeType.PERSIST, CascadeType.MERGE })
    private Set<Book> books = new HashSet<>();

    public Author(String fullName) {
        super(fullName);
    }
}

@Table(name = "authors")
@Entity(name = "AuthorCascadeAll")
@NoArgsConstructor
class AuthorCascadeAll extends AuthorEssential<Book> {

    @Getter
    @Setter
    @javax.persistence.ManyToMany(mappedBy = "authors", cascade = CascadeType.ALL)
    private Set<Book> books = new HashSet<>();
}

@Table(name = "authors")
@Entity(name = "AuthorAndBookCascadeAll")
@NoArgsConstructor
class AuthorAndBookCascadeAll extends AuthorEssential<BookAndAuthorCascadeAll> {

    @Getter
    @Setter
    @javax.persistence.ManyToMany(mappedBy = "authors", cascade = CascadeType.ALL)
    private Set<BookAndAuthorCascadeAll> books = new HashSet<>();
}




@Table(name = "books")
@Entity
@NoArgsConstructor
class Book extends BookEssential<Author> {

    @Getter
    @Setter
    @javax.persistence.ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE})
    private Set<Author> authors = new HashSet<>();

    public Book(String title) {
        super(title);
    }
}

@Table(name = "books")
@Entity(name = "BookAndAuthorCascadeAll")
@NoArgsConstructor
class BookAndAuthorCascadeAll extends BookEssential<AuthorCascadeAll> {

    @Getter
    @Setter
    @javax.persistence.ManyToMany(cascade = CascadeType.ALL)
    private Set<AuthorCascadeAll> authors = new HashSet<>();
}






@NoArgsConstructor
@MappedSuperclass
abstract class AuthorEssential<B extends BookEssential> extends AutoGeneratedId<Integer> {

    public AuthorEssential(String fullName) {
        this.fullName = fullName;
    }

    @Getter
    @Column(name = "full_name", nullable = false)
    protected String fullName;

    abstract Set<B> getBooks();

    public Integer getBooksAmount() {
        return this.getBooks().size();
    }

    public AuthorEssential<B> addBooks(B... books) {
        if (books.length == 0) return this;
        Arrays.stream(books).forEach(this::addBook);
        return this;
    }

    public AuthorEssential<B> addBooks(Collection<B> books) {
        if (books.size() == 0) return this;
        books.forEach(this::addBook);
        return this;
    }

    public AuthorEssential<B> removeBooks() {
        Iterator<B> bookIterator = getBooks().iterator();
        while (bookIterator.hasNext()) {
            B book = bookIterator.next();
            bookIterator.remove();
            removeAuthor(book);
        }
        return this;
    }

    private boolean removeAuthor(B book) {
        return book.getAuthors().remove(this);
    }

    private void addAuthor(B book) {
        book.getAuthors().add(this);
    }

    public AuthorEssential<B> addBook(B book) {
        this.getBooks().add(book);
        this.addAuthor(book);
        return this;
    }
}

@NoArgsConstructor
@MappedSuperclass
abstract class BookEssential<A extends AuthorEssential> extends AutoGeneratedId<Integer> {

    @Column(name = "title", nullable = false)
    protected String title;

    public BookEssential(String title) {
        this.title = title;
    }

    @JoinTable(name = "books_authors",
        joinColumns = { @JoinColumn(name = "book_id", referencedColumnName = "id") },
        inverseJoinColumns = { @JoinColumn(name = "author_id", referencedColumnName = "id") },
        uniqueConstraints = { @UniqueConstraint(columnNames = {"book_id, author_id"}) }
    )
    abstract Set<A> getAuthors();
    abstract void setAuthors(Set<A> authors);
}
