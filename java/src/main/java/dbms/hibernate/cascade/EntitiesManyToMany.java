package dbms.hibernate.cascade;

import dbms.hibernate.AutoGeneratedId;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.MappedSuperclass;
import javax.persistence.Table;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class EntitiesManyToMany {
}

@Table(name = "books")
@Entity
class Book extends BookEssential<Author> {

    @Getter
    @Setter
    @javax.persistence.ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE})
    private List<Author> authors = new ArrayList<>();

    public Book(String title) {
        super(title);
    }
}

@Table(name = "books")
@Entity(name = "BookCascadeAll")
class BookCascadeAll extends BookEssential<AuthorCascadeAll> {

    @Getter
    @Setter
    @javax.persistence.ManyToMany(cascade = CascadeType.ALL)
    private List<AuthorCascadeAll> authors = new ArrayList<>();

    public BookCascadeAll(String title) {
        super(title);
    }

}

@NoArgsConstructor
@MappedSuperclass
abstract class BookEssential<A extends AuthorEssential> extends AutoGeneratedId {

    @Column(name = "title", nullable = false)
    protected String title;

    public BookEssential(String title) {
        this.title = title;
    }

    @JoinTable(name = "Book_Author",
        joinColumns = {@JoinColumn(name = "book_id", referencedColumnName = "id")},
        inverseJoinColumns = {@JoinColumn(name = "author_id", referencedColumnName = "id")}
    )
    abstract List<A> getAuthors();
    abstract void setAuthors(List<A> authors);
}


@Table(name = "authors")
@Entity
@NoArgsConstructor
class Author extends AuthorEssential<Book> {

    @Getter
    @Setter
    @javax.persistence.ManyToMany(mappedBy = "authors", cascade = { CascadeType.PERSIST, CascadeType.MERGE })
    private List<Book> books = new ArrayList<>();

    public Author(String fullName) {
        super(fullName);
    }
}

@Table(name = "authors")
@Entity(name = "AuthorCascadeAll")
@NoArgsConstructor
class AuthorCascadeAll extends AuthorEssential<BookCascadeAll> {


    @Column(name = "full_name", nullable = false)
    private String fullName;

    @Getter
    @Setter
    @javax.persistence.ManyToMany(mappedBy = "authors", cascade = CascadeType.ALL)
    private List<BookCascadeAll> books = new ArrayList<>();

    public AuthorCascadeAll(String fullName) {
        this.fullName = fullName;
    }
}


@NoArgsConstructor
@MappedSuperclass
abstract class AuthorEssential<B extends BookEssential> extends AutoGeneratedId {

    public AuthorEssential(String fullName) {
        this.fullName = fullName;
    }

    @Column(name = "full_name", nullable = false)
    protected String fullName;

    abstract List<B> getBooks();

    public void addBook(B book) {
        getBooks().add(book);
        List<AuthorEssential<B>> authors = book.getAuthors();
        authors.add(this);
    }

    public void removeBook(B book) {
        getBooks().remove(book);
        book.getAuthors().remove(this);
    }

    public void removeBooks() {
        Iterator<B> bookIterator = getBooks().iterator();
        while (bookIterator.hasNext()) {
            B book = bookIterator.next();
            bookIterator.remove();
            removeBook(book);
        }
    }
}