package dbms.hibernate.cascade;

import dbms.hibernate.AutoGeneratedId;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.Accessors;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.MapsId;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import java.util.Date;

public class EntitiesOneToOne {
}

@Entity
@Table(name = "cars")
@Accessors(chain = true)
class Car extends AutoGeneratedId<Integer> {

    public Car(String name) {
        this.name = name;
    }

    @Setter
    private String name;

    @Getter
    @Setter
    @javax.persistence.OneToOne(mappedBy = "car", cascade = CascadeType.ALL, orphanRemoval = true)
    private CarDetails details;

    public Integer getDetailsId() {
        return details == null ? null : details.getId();
    }

    public Car addDetails(CarDetails details) {
        this.details = details;
        details.setCar(this);
        return this;
    }

    public Car removeDetails(CarDetails details) {
        if (details != null) {
            details.setCar(null);
        }
        this.details = null;
        return this;
    }

}
@Entity
@Setter
@Table(name = "car_details")
@NoArgsConstructor
class CarDetails extends AutoGeneratedId<Integer> {

    @Column(name = "created_on")
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdOn;

    private boolean visible;

    @Getter
    @javax.persistence.OneToOne
    @MapsId
    private Car car;

    public Integer getCarId() {
        return this.car == null ? null : this.car.getId();
    }
}


@Entity
@Table(name = "commits")
@NoArgsConstructor
class Commit extends AutoGeneratedId<Integer> {

    private String comment;

    @javax.persistence.OneToOne(cascade = CascadeType.ALL)
    private BranchMerge branchMerge;

    public Commit(String comment) {
        this.comment = comment;
    }

    public void addBranchMerge(
        String fromBranch, String toBranch) {
        this.branchMerge = new BranchMerge(
            fromBranch, toBranch
        );
    }

    public void removeBranchMerge() {
        this.branchMerge = null;
    }
}

@Entity
@Table(name = "branch_merges")
@NoArgsConstructor
class BranchMerge extends AutoGeneratedId<Integer> {

    private String fromBranch;

    private String toBranch;

    public BranchMerge(
        String fromBranch, String toBranch) {
        this.fromBranch = fromBranch;
        this.toBranch = toBranch;
    }
}

