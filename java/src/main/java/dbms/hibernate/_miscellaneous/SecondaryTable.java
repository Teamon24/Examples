package dbms.hibernate._miscellaneous;


import dbms.hibernate.AutoGeneratedId;
import dbms.hibernate.SessionFactoryBuilder;
import lombok.Setter;
import lombok.experimental.Accessors;
import org.hibernate.Session;
import org.hibernate.SessionFactory;

import javax.persistence.Column;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.MappedSuperclass;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;
import java.math.BigDecimal;

import static dbms.hibernate.TransactionUtils.commit;
import static dbms.hibernate._miscellaneous.Meal.MEAL_FK;

/**
 * <pre>
 * |--------------------|     |--------------------------|
 * | meal               |     | allergens                |
 * |--------------------|     |--------------------------|
 * |      |             |     |           |              |
 * | pk   | id<---------|-----|-pk--------|-meal_id      |
 * |      | name        |     |           | peanuts      |
 * |      | description |     |           | celery       |
 * |      | price       |     |           | sesame_seeds |
 * |      |             |     |           |              |
 * |------|-------------|     |-----------|--------------|
 * </pre>
 *
 * ---------------------------------------------------------------------------------------------------------------------
 * <p><strong>Creating a Single Entity with @SecondaryTable</strong></p>
 * ---------------------------------------------------------------------------------------------------------------------
 * <p>Behind the scenes, JPA joins the primary table with the secondary table and populates the fields.
 * This solution is similar to the @OneToOne relationship, but this way, we can have all
 * of the properties in the same class.
 *
 * <p>It's important to note that if we have a column that is in a secondary table,
 * we have to specify it with the table argument of the @Column annotation.
 * If a column is in the primary table, we can omit the table argument as
 * JPA looks for columns in the primary table by default. </p>
 *
 * ---------------------------------------------------------------------------------------------------------------------
 * <p><strong>Combining @SecondaryTable With @Embedded</strong></p>
 * ---------------------------------------------------------------------------------------------------------------------
 * <p>
 * It's a similar approach to what we saw using @OneToOne. However, it has a couple of advantages:
 * <ul>
 *     <li>JPA manages the two tables together for us, so we can be sure that there will be a row for each meal in both tables</li>
 *     <li>Also, the code is a bit simpler, since we need less configuration</li>
 * </ul>
 * Nevertheless, this one-to-one like solution works only when the two tables have matching ids.
 *
 * <p>
 *     It's worth mentioning that if we want to reuse the Allergens class, it would be better if we defined the columns of the secondary table in the Meal class with @AttributeOverride.
 */
public interface SecondaryTable {

    static void main(String[] args) {
        SessionFactory sessionFactory = new SessionFactoryBuilder()
            .resourceName("/META-INF/hibernate-postgresql-example.cfg.xml")
            .entitiesClasses(
                MealOneEntity.class,
                MealEmbeddable.class,
                Allergens.class)
            .build();

        try(Session session = sessionFactory.openSession()) {
            commit(session, s -> {
                s.save(new MealOneEntity()
                        .setName("Meal 1")
                        .setDescription("Description 1")
                        .setPrice(new BigDecimal(1))
                        .setCelery(true)
                        .setSesameSeeds(true)
                        .setPeanuts(true)
                );

                s.save(new MealEmbeddable()
                        .setName("Meal 2")
                        .setDescription("Description 2")
                        .setPrice(new BigDecimal(1))
                        .setCelery(false)
                        .setSesameSeeds(false)
                        .setPeanuts(false)
                );
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

@Entity
@Table(name = Meal.MEALS)
@javax.persistence.SecondaryTable(
    name = Meal.ALLERGENS,
    pkJoinColumns = @PrimaryKeyJoinColumn(name = MEAL_FK)
)
class MealEmbeddable extends Meal {

    @Embedded
    private Allergens allergens;

    public MealEmbeddable() {
        super();
        this.allergens = new Allergens();
    }

    @Override
    public Meal setPeanuts(boolean peanuts) {
        this.allergens.peanuts = peanuts;
        return this;
    }

    @Override
    public Meal setCelery(boolean celery) {
        this.allergens.celery = celery;
        return this;
    }

    @Override
    public Meal setSesameSeeds(boolean sesameSeeds) {
        this.allergens.sesameSeeds = sesameSeeds;
        return this;
    }
}

@Entity
@Table(name = Meal.MEALS)
@javax.persistence.SecondaryTable(
    name = Meal.ALLERGENS,
    pkJoinColumns = @PrimaryKeyJoinColumn(name = MEAL_FK)
)
@Setter
@Accessors(chain = true)
class MealOneEntity extends Meal {

    @Column(name = "peanuts", table = "allergens")
    boolean peanuts;

    @Column(name = "celery", table = "allergens")
    boolean celery;

    @Column(name = "sesame_seeds", table = "allergens")
    boolean sesameSeeds;
}

@javax.persistence.Embeddable
class Allergens {
    @Column(name = "peanuts", table = "allergens")
    boolean peanuts;

    @Column(name = "celery", table = "allergens")
    boolean celery;

    @Column(name = "sesame_seeds", table = "allergens")
    boolean sesameSeeds;
}


@MappedSuperclass
@Setter
@Accessors(chain = true)
abstract class Meal extends AutoGeneratedId<Long> {
    public static final String NAME = "name";
    public static final String DESCRIPTION = "description";
    public static final String PRICE = "price";
    public static final String MEALS = "meals";
    public static final String ALLERGENS = "allergens";
    public static final String MEAL_FK = "meal_id";

    @Column(name = NAME)
    String name;

    @Column(name = DESCRIPTION)
    String description;

    @Column(name = PRICE)
    BigDecimal price;

    public abstract Meal setPeanuts(boolean peanuts);
    public abstract Meal setCelery(boolean celery);
    public abstract Meal setSesameSeeds(boolean sesameSeeds);
}