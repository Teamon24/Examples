/**
 * ---------------------------------------------------------------------------------------------------------------------
 * <p><a href="https://refactoring.guru/ru/design-patterns/bridge"><strong>Мост</strong></a></p>
 * ---------------------------------------------------------------------------------------------------------------------
 * <p>это структурный паттерн, который разделяет бизнес-логику или большой класс на несколько отдельных
 * иерархий, которые потом можно развивать отдельно друг от друга. Одна из этих иерархий (абстракция)
 * получит ссылку на объекты другой иерархии (реализация) и будет делегировать им основную работу.
 * Благодаря тому, что все реализации будут следовать общему интерфейсу, их можно будет взаимозаменять внутри абстракции.
 * ---------------------------------------------------------------------------------------------------------------------
 * <p><strong>Области применения:</strong></p>
 * ---------------------------------------------------------------------------------------------------------------------
 * <p>паттерн Мост особенно полезен когда вам приходится делать кросс-платформенные приложения,
 * поддерживать несколько типов баз данных или работать с разными поставщиками
 * похожего API (например, cloud-сервисы, социальные сети и т. д.)
 * ---------------------------------------------------------------------------------------------------------------------
 * <p><strong>Применимость:</strong></p>
 * ---------------------------------------------------------------------------------------------------------------------
 * <p>1. Когда вы хотите разделить монолитный класс, который содержит несколько различных реализаций какой-то функциональности
 * (например, если класс может работать с разными системами баз данных):
 * <p>- чем больше класс, тем тяжелее разобраться в его коде, и тем больше это затягивает разработку. Кроме того,
 * изменения, вносимые в одну из реализаций, приводят к редактированию всего класса, что может привести
 * к внесению случайных ошибок в код.
 * <p>- мост позволяет разделить монолитный класс на несколько отдельных иерархий. После этого вы можете менять их код
 * независимо друг от друга. Это упрощает работу над кодом и уменьшает вероятность внесения ошибок.
 * <p>2. Когда класс нужно расширять в двух независимых плоскостях:<p>
 * <p>- мост предлагает выделить одну из таких плоскостей в отдельную иерархию классов, храня ссылку на один из её
 * объектов в первоначальном классе.
 * <p>* Когда вы хотите, чтобы реализацию можно было бы изменять во время выполнения программы:
 * <p>- мост позволяет заменять реализацию даже во время выполнения программы, так как конкретная реализация не «вшита»
 * в класс абстракции: кстати, из-за этого пункта Мост часто путают со Стратегией. Обратите внимание, что у Моста этот
 * пункт стоит на последнем месте по
 * значимости, поскольку его главная задача — структурная.
 * ---------------------------------------------------------------------------------------------------------------------
 * <p><strong>Шаги реализации:</strong></p>
 * ---------------------------------------------------------------------------------------------------------------------
 * <p>1. Определите, существует ли в ваших классах два непересекающихся измерения. Это может быть
 * функциональность/платформа, предметная-область/инфраструктура, фронт-энд/бэк-энд или интерфейс/реализация.
 * <p>2. Продумайте, какие операции будут нужны клиентам, и опишите их в базовом классе абстракции.
 * <p>3. Определите поведения, доступные на всех платформах, и выделите из них ту часть, которая нужна абстракции.
 * На основании этого опишите общий интерфейс реализации.
 * <p>4. Для каждой платформы создайте свой класс конкретной реализации. Все они должны следовать общему интерфейсу,
 * который мы выделили перед этим.
 * <p>5. Добавьте в класс абстракции ссылку на объект реализации. Реализуйте методы абстракции, делегируя основную
 * работу связанному объекту реализации.
 * <p>6. Если у вас есть несколько вариаций абстракции, создайте для каждой из них свой подкласс.
 * <p>7. Клиент должен подать объект реализации в конструктор абстракции, чтобы связать их воедино. После этого он
 * может свободно использовать объект абстракции, забыв о реализации.
 * ---------------------------------------------------------------------------------------------------------------------
 * <p><strong>Преимущества и недостатки:</strong></p>
 * ---------------------------------------------------------------------------------------------------------------------
 * <p>+: позволяет строить платформо-независимые программы.
 * <p>+: скрывает лишние или опасные детали реализации от клиентского кода.
 * <p>+: реализует принцип открытости/закрытости.
 * <p>-: усложняет код программы из-за введения дополнительных классов.
 * ---------------------------------------------------------------------------------------------------------------------
 * <p><strong>Отношения с другими паттернами:</strong></p>
 * ---------------------------------------------------------------------------------------------------------------------
 * <p>- мост проектируют загодя, чтобы развивать большие части приложения отдельно друг от друга. Адаптер применяется
 * постфактум, чтобы заставить несовместимые классы работать вместе.
 * <p>- мост, Стратегия и Состояние (а также слегка и Адаптер) имеют схожие структуры классов — все они построены на
 * принципе «композиции», то есть делегирования работы другим объектам. Тем не менее, они отличаются тем, что решают
 * разные проблемы. Помните, что паттерны — это не только рецепт построения кода определённым образом, но и описание
 * проблем, которые привели к данному решению.
 * <p>- абстрактная фабрика может работать совместно с Мостом. Это особенно полезно, если у вас есть абстракции,
 * которые могут работать только с некоторыми из реализаций. В этом случае фабрика будет определять
 * типы создаваемых абстракций и реализаций.
 * <p>- паттерн Строитель может быть построен в виде Моста: директор будет играть роль абстракции,
 * а строители — реализации.
 */
package patterns.refactoring.guru.structural.bridge;